/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.11
 * Generated at: 2023-09-18 09:03:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.example.util.Alpha;

public final class blink_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.example.util.Alpha");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>blink.jsp</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("table {\n");
      out.write("	font-family: monospace;\n");
      out.write("	font-size: 3em;\n");
      out.write("	border-collapse: collapse;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("/*\n");
      out.write(" * 만든이 : 오영창\n");
      out.write(" * 작성일 : 2023/08/28\n");
      out.write(" * 과 목 : Spring boot 응용\n");
      out.write(" */\n");
      out.write("\n");
      out.write("\n");
      out.write("class Blink{ \n");
      out.write("	\n");
      out.write("	tid =[];\n");
      out.write("	a;\n");
      out.write("	\n");
      out.write("	constructor(ch){\n");
      out.write("		\n");
      out.write("		this.a = ch;\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	run() {\n");
      out.write("		console.log(\"run..\"+Math.random())	\n");
      out.write("		\n");
      out.write("		let table = document.querySelector('table')\n");
      out.write("		\n");
      out.write("		for(let tr of table.rows){\n");
      out.write("			for(let td of tr.cells){\n");
      out.write("			 \n");
      out.write("				if(td.innerHTML== this.a){\n");
      out.write("				let id = setInterval(function() {\n");
      out.write("					if(td.style.visibility =='hidden')\n");
      out.write("						td.style.visibility ='visible'\n");
      out.write("					else\n");
      out.write("						td.style.visibility='hidden'\n");
      out.write("				}, Math.random()*500+10);\n");
      out.write("			  \n");
      out.write("			  this.tid.push(id)\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("			\n");
      out.write(" }\n");
      out.write("	\n");
      out.write("	clear() {\n");
      out.write("		console.log(\"clear..\"+Math.random())	\n");
      out.write("		console.log(this.tid)	\n");
      out.write("		for(let id of this.tid){\n");
      out.write("			 clearInterval(id)\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	hide(){\n");
      out.write("	let td = document.querySelector('table')\n");
      out.write("		if(td.style.visibility=='visible')\n");
      out.write("			td.style.visibility='hidden';\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("window.onload = function() {\n");
      out.write("	let td = document.querySelector('table');\n");
      out.write("	let start = document.querySelectorAll('button')[0];\n");
      out.write("	let select = document.querySelector('select');\n");
      out.write("	let stop = document.querySelectorAll('button')[1];\n");
      out.write("	let show = document.querySelectorAll('button')[2];\n");
      out.write("	let hide = document.querySelectorAll('button')[3];\n");
      out.write("	\n");
      out.write("	start.disabled = false;\n");
      out.write("	select.disabled=false;\n");
      out.write("	stop.disabled = true;\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	start.onclick = function(){\n");
      out.write("		\n");
      out.write("		start.disabled = true;\n");
      out.write("		select.disabled= true;\n");
      out.write("		stop.disabled = false;\n");
      out.write("	    let a = select.options[select.selectedIndex].value\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		blink = new Blink(a);   \n");
      out.write("		blink.run();\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	stop.onclick = function(){\n");
      out.write("		\n");
      out.write("		start.disabled = false;\n");
      out.write("		select.disabled = false;\n");
      out.write("		stop.disabled = true;\n");
      out.write("		\n");
      out.write("		blink.clear();\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	hide.onclick = function(){\n");
      out.write("		for(let tr of td.rows){\n");
      out.write("			for(let tdd of tr.cells){\n");
      out.write("				if(tdd.style.visibility =='visible')\n");
      out.write("					tdd.style.visibility ='hidden'\n");
      out.write("				else\n");
      out.write("					tdd.style.visibility='hidden'\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("			 \n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	show.onclick = function(){\n");
      out.write("		for(let tr of td.rows){\n");
      out.write("			for(let tdd of tr.cells){\n");
      out.write("				if(tdd.style.visibility =='hidden')\n");
      out.write("					tdd.style.visibility ='visible'\n");
      out.write("				else\n");
      out.write("					tdd.style.visibility='hidden'\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1>Alpha blink</h1>\n");
      out.write("<button>start</button>\n");
      out.write("<select>\n");
      out.write("	");
 for(var i=0;i<26;i++){
	
      out.write("<option>");
      out.print((char)('A'+i));
      out.write("</option>\n");
      out.write("	");

	}
	
      out.write("</select>\n");
      out.write("\n");
      out.write("\n");
      out.write("<button>stop</button>\n");
      out.write("<button>show</button>\n");
      out.write("<button>hide</button>\n");
      out.write("<hr>\n");
      out.write("<table>\n");
      out.write("	<tbody>\n");
      out.write("\n");
      out.write("	");

		for (var i=0; i<20; i++) {
	
      out.write("<tr>\n");
      out.write("		");
 
			for (var j=0; j<40; j++) {
				var a = new Alpha();
		
      out.write("<td style=\"color: ");
      out.print(a.getFg());
      out.write("; background: ");
      out.print(a.getBg());
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(a.getCh());
      out.write("</td>\n");
      out.write("		");

			}
		
      out.write("</tr>\n");
      out.write("	");

		}
	
      out.write("</tbody>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
