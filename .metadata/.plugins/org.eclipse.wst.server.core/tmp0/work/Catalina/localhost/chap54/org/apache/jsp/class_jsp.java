/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.11
 * Generated at: 2023-09-18 02:05:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class class_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>class.jsp</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\n");
      out.write(".box {\n");
      out.write("	width: 100px;\n");
      out.write("	height: 100px;\n");
      out.write("}\n");
      out.write(".circle {\n");
      out.write("	border-radius: 50px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".red {\n");
      out.write("	border: 10px solid red;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".blue {\n");
      out.write("	border: 10px solid blue;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".green {\n");
      out.write("	border: 10px solid green;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*\n");
      out.write("input[value='box'] {\n");
      out.write("	width: 50px;\n");
      out.write("}\n");
      out.write("*/\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("window.onload = function() {\n");
      out.write("	let boxs = document.querySelectorAll(\"input[value='box']\");\n");
      out.write("	boxs.forEach(function(elt, i, array) {\n");
      out.write("		elt.onchange = function() {\n");
      out.write("			let box = elt.parentElement.nextElementSibling;\n");
      out.write("			if (elt.checked) {\n");
      out.write("				box.classList.add('box');\n");
      out.write("			} else {\n");
      out.write("				box.classList.remove('box');\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	let circles = document.querySelectorAll(\"input[value='circle']\");\n");
      out.write("	circles.forEach(function(elt, i, array) {\n");
      out.write("		elt.onchange = function() {\n");
      out.write("			let box = elt.parentElement.nextElementSibling;\n");
      out.write("			if (elt.checked) {\n");
      out.write("				box.classList.add('circle');\n");
      out.write("			} else {\n");
      out.write("				box.classList.remove('circle');\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	/*\n");
      out.write("	let colors = document.querySelectorAll(`\n");
      out.write("			input[name='color1'],\n");
      out.write("			input[name='color2'],\n");
      out.write("			input[name='color3'],\n");
      out.write("			input[name='color4']\n");
      out.write("	`)\n");
      out.write("	*/\n");
      out.write("// 	let colors = document.querySelectorAll(\"input[name*='color']\")\n");
      out.write("	let colors = document.querySelectorAll(\"input[name^='color']\")\n");
      out.write("	\n");
      out.write("	colors.forEach(input => {\n");
      out.write("		input.onchange = e => {\n");
      out.write("				let box = input.parentElement.nextElementSibling;\n");
      out.write("				\n");
      out.write("				box.classList.remove('red')\n");
      out.write("				box.classList.remove('blue')\n");
      out.write("				box.classList.remove('green')\n");
      out.write("				\n");
      out.write("				box.classList.add(input.value);\n");
      out.write("		}	\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	console.log(colors)\n");
      out.write("	\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h2>class 선택자</h2>\n");
      out.write("<hr>\n");
      out.write("<div>\n");
      out.write("	<label>box</label>\n");
      out.write("	<input type=\"checkbox\" value=\"box\">\n");
      out.write("	<label>circle</label>\n");
      out.write("	<input type=\"checkbox\" value=\"circle\">\n");
      out.write("	<label>red</label>\n");
      out.write("	<input type=\"radio\" value=\"red\" name=\"color1\">\n");
      out.write("	<label>blue</label>\n");
      out.write("	<input type=\"radio\" value=\"blue\" name=\"color1\">\n");
      out.write("	<label>green</label>\n");
      out.write("	<input type=\"radio\" value=\"green\" name=\"color1\">\n");
      out.write("</div>\n");
      out.write("<div id=\"box1\">box1</div>\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("	<label>box</label>\n");
      out.write("	<input type=\"checkbox\" value=\"box\">\n");
      out.write("	<label>circle</label>\n");
      out.write("	<input type=\"checkbox\" value=\"circle\">\n");
      out.write("	<label>red</label>\n");
      out.write("	<input type=\"radio\" value=\"red\" name=\"color2\">\n");
      out.write("	<label>blue</label>\n");
      out.write("	<input type=\"radio\" value=\"blue\" name=\"color2\">\n");
      out.write("	<label>green</label>\n");
      out.write("	<input type=\"radio\" value=\"green\" name=\"color2\">\n");
      out.write("</div>\n");
      out.write("<div id=\"box2\">box2</div>\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("	<label>box</label>\n");
      out.write("	<input type=\"checkbox\" value=\"box\">\n");
      out.write("	<label>circle</label>\n");
      out.write("	<input type=\"checkbox\" value=\"circle\">\n");
      out.write("	<label>red</label>\n");
      out.write("	<input type=\"radio\" value=\"red\" name=\"color3\">\n");
      out.write("	<label>blue</label>\n");
      out.write("	<input type=\"radio\" value=\"blue\" name=\"color3\">\n");
      out.write("	<label>green</label>\n");
      out.write("	<input type=\"radio\" value=\"green\" name=\"color3\">\n");
      out.write("</div>\n");
      out.write("<div id=\"box3\">box3</div>\n");
      out.write("\n");
      out.write("<div>\n");
      out.write("	<label>box</label>\n");
      out.write("	<input type=\"checkbox\" value=\"box\">\n");
      out.write("	<label>circle</label>\n");
      out.write("	<input type=\"checkbox\" value=\"circle\">\n");
      out.write("	<label>red</label>\n");
      out.write("	<input type=\"radio\" value=\"red\" name=\"color4\">\n");
      out.write("	<label>blue</label>\n");
      out.write("	<input type=\"radio\" value=\"blue\" name=\"color4\">\n");
      out.write("	<label>green</label>\n");
      out.write("	<input type=\"radio\" value=\"green\" name=\"color4\">\n");
      out.write("</div>\n");
      out.write("<div id=\"box4\">box4</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
