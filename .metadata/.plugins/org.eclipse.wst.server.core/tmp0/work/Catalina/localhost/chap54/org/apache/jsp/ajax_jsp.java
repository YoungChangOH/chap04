/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.11
 * Generated at: 2023-09-18 08:19:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1694999227568L));
    _jspx_dependants.put("jar:file:/D:/03_Src/java/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/chap54/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("/*\n");
      out.write(" * 만든이 : 오영창\n");
      out.write(" * 작성일 : 2023/09/18\n");
      out.write(" * 과 목 : 웹표준\n");
      out.write(" */\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>ajax.jsp</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("window.onload = function() {\n");
      out.write("\n");
      out.write("	function sync() {\n");
      out.write("		btn.disabled = true;\n");
      out.write("		let xhr = new XMLHttpRequest();\n");
      out.write("		xhr.open('GET', '/alpha', false); \n");
      out.write("		xhr.send();\n");
      out.write("		console.log(xhr.responseText);\n");
      out.write("		let alpha = JSON.parse(xhr.responseText);\n");
      out.write("		let td = surface.rows[alpha.line-1].cells[alpha.column-1];\n");
      out.write("		td.style.color = alpha.fg;\n");
      out.write("		td.style.background = alpha.bg;\n");
      out.write("		td.innerText = alpha.ch;\n");
      out.write("		btn.disabled = false;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	function async() {\n");
      out.write("		btn.disabled = true;\n");
      out.write("		let xhr = new XMLHttpRequest();\n");
      out.write("		xhr.onload = function(e) {\n");
      out.write("			console.log(xhr.responseText);\n");
      out.write("			let alpha = JSON.parse(xhr.responseText);\n");
      out.write("			let td = surface.rows[alpha.line-1].cells[alpha.column-1];\n");
      out.write("			td.style.color = alpha.fg;\n");
      out.write("			td.style.background = alpha.bg;\n");
      out.write("			td.innerText = alpha.ch;\n");
      out.write("			btn.disabled = false;\n");
      out.write("		}\n");
      out.write("		xhr.open('GET', '/alpha');\n");
      out.write("		xhr.send();\n");
      out.write("	}\n");
      out.write("	\n");
      out.write(" 	btn.onclick = sync;\n");
      out.write("	btn.onclick = async;\n");
      out.write("	\n");
      out.write("	setInterval(function() {\n");
      out.write("		let cnt = no.innerText;\n");
      out.write("		no.innerText = ++cnt;\n");
      out.write("	}, 100);\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1>Alpha Graphics</h1>\n");
      out.write("<hr>\n");
      out.write("<div id=\"wrapper\">\n");
      out.write("      <button id=\"button-start\">Start</button>\n");
      out.write("      <button id=\"button-reset\">clear</button>\n");
      out.write("<table\n");
      out.write("	border=\"1\"\n");
      out.write("	width =\"60%\"\n");
      out.write("	height=\"10\"\n");
      out.write("	cellspacing=\"2\">\n");
      out.write("	<thead>\n");
      out.write("		<tr align=\"center\" bgcolor=\"white\">\n");
      out.write("		<th>forCount</th>\n");
      out.write("		<th>Count</th>\n");
      out.write("		<th>Second</th>\n");
      out.write("	<tbody>\n");
      out.write("		<tr align=\"center\" bgcolor=\"white\">\n");
      out.write("		<th><p><span id=\"no\">0</span></p>\n");
      out.write("		</th>\n");
      out.write("		<th></th>\n");
      out.write("		<th>\n");
      out.write("      <p> <span id=\"seconds\">00</span> : <span id=\"centiseconds\">00</span> </p>\n");
      out.write("	</th>\n");
      out.write("	</tbody>\n");
      out.write("\n");
      out.write("<table id=\"surface\">\n");
      out.write("	<tbody>\n");
      out.write("	<forEach var=\"row\" items=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${surface}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("		<tr>\n");
      out.write("		<forEach var=\"a\" items=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${row}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("			<td style=\"fgcolor: black; bgcolor: White;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${a.ch}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("		</forEach>\n");
      out.write("		</tr>\n");
      out.write("	</forEach>\n");
      out.write("	</tbody>\n");
      out.write("    </div>\n");
      out.write("</table>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
